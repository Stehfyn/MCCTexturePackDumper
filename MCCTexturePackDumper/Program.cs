using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using ImageMagick;

namespace MCCTexturePackDumper
{
	class Program
	{
        private const int ERROR_SUCCESS        = 0x00;
        private const int ERROR_NO_TEXTURES    = 0x02;
        private const int ERROR_BAD_ARGUMENTS  = 0x03;
		private const int ERROR_ALREADY_EXISTS = 0x04;

        private static void Main(string[] args)
		{
			Console.WriteLine("MCC Texture Pack Dumper by Zedd.");

			string packname;

			if (args.Length == 0)
			{
				Console.WriteLine("Must be ran from inside the game's \\data\\ui\\texturepacks folder.");
				Console.WriteLine("Files will be output in a subfolder with the same name as the texture pack.");
				Console.WriteLine();
				Console.WriteLine("Enter a texture pack without any extensions.:");
				Console.WriteLine("Example \"emblemstexturepack\" (without quotes)");
				packname = Console.ReadLine();
			}
			else
				packname = args[0];

			var packfiles = Directory.GetFiles(Directory.GetCurrentDirectory());

			string tempbin = null;
			string permbin = null;
			string permidx = null;//theres a format here but contents can be pulled without it

			foreach (string s in packfiles.Where(p => p.Contains(packname)))
			{
				if (s.EndsWith(".temp.bin"))
					tempbin = s;
				else if (s.EndsWith(".perm.bin"))
					permbin = s;
				else if (s.EndsWith(".perm.idx"))
					permidx = s;
			}

			if (tempbin == null &&
				permbin == null)
			{
				Console.WriteLine("Given texture pack not found. Press any key to exit.");
				//Console.ReadKey(); Seriously, why?
				Environment.Exit(ERROR_BAD_ARGUMENTS);
			}

			List<FileEntry> entries = new List<FileEntry>();
			List<FileBlock> blocks = new List<FileBlock>();

			Console.WriteLine("Looking for textures in " + packname + "...");
			using (FileStream fs = new FileStream(permbin, FileMode.Open))
			{
				using (BinaryReader br = new BinaryReader(fs))
				{
					//loop through file for all blocks, grabbing any file entries along the way
					while (fs.Position < fs.Length)
					{
						uint pos = (uint)fs.Position;
						uint blockkey = br.ReadUInt32();
						int size1 = br.ReadInt32();

						if (blockkey == 0x5E73CDD7)
						{
							FileBlock bl = new FileBlock()
							{
								Key = blockkey,
								Size = size1,
								StartOffset = pos
							};
							blocks.Add(bl);
						}
						else if (blockkey == 0xCDBFA090)
						{
							int basee = (int)pos;
							fs.Position = basee + 0x44;

							byte[] namebytes = br.ReadBytes(0x20);
							string nam = Encoding.ASCII.GetString(namebytes).TrimEnd('\0');

							fs.Position = basee + 0x6c;

							byte form = br.ReadByte();

							if (form >= (byte)TextureFormat.Invalid)
							{
								Console.WriteLine(nam + " has an unrecognized format? Skipping.");
								fs.Position = pos + size1 + 0x10;
								continue;
							}

							fs.Position = basee + 0x74;

							short wid = br.ReadInt16();
							short hig = br.ReadInt16();

							fs.Position = basee + 0x88;
							int size = br.ReadInt32();

							fs.Position = basee + 0x90;

							uint off = br.ReadUInt32();

							FileEntry ff = new FileEntry()
							{
								Name = nam,
								Width = wid,
								Height = hig,
								Format = (TextureFormat)form,
								Size = size,
							};

							if (blocks.Count != 0)
								ff.Offset = blocks.Last().StartOffset + off;//idx hack, data block and entry block appear to be written after eachother
							else
								ff.Offset = off;
							entries.Add(ff);
						}
						fs.Position = pos + size1 + 0x10;
					}
				}
			}

			if (entries.Count == 0)
			{
				Console.WriteLine("Could not find any textures? Press any key to exit.");
                //Console.ReadKey(); GRRRRRRRRRRRRR
                Environment.Exit(ERROR_NO_TEXTURES);
			}


			Console.WriteLine(entries.Count.ToString() + " textures found. Writing...");
			string outpath = Path.Combine(Directory.GetCurrentDirectory(), packname);
			if (!Directory.Exists(outpath))
			{
				Directory.CreateDirectory(outpath);
				StringWriter sw = new StringWriter();
				sw.WriteLine("This file was generated by MCCTexturePackDumper.");
				sw.WriteLine(string.Format("{0,-32}\t{1,8}\t{2,-8:X}\t{3,-8:X}", "Name", "Format", "Size", "Offset"));
				sw.WriteLine();

				using (FileStream fs = new FileStream(tempbin ?? permbin, FileMode.Open))
				{
					using (BinaryReader br = new BinaryReader(fs))
					{
						foreach (FileEntry fe in entries)
						{
							int size = fe.Size;

							fs.Position = fe.Offset;

							byte[] dats = br.ReadBytes(size);

							string outfile = Path.Combine(outpath, fe.Name + ".png");

							if (fe.Format != TextureFormat.A8R8G8B8)
							{
								MagickReadSettings sett = new MagickReadSettings
								{
									Width = fe.Width,
									Height = fe.Height
								};

								//gotta create a proper dds file in memory i guess
								using (MemoryStream fakefilemem = new MemoryStream())
								{
									using (BinaryWriter ffw = new BinaryWriter(fakefilemem))
									{
										ffw.Write(new byte[] { 0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x08, 0x00 });

										ffw.Write(fe.Height);
										ffw.Write(fe.Width);

										ffw.Write((uint)0x400);
										ffw.Write(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
										0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
										0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
										0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54 });

										if (fe.Format == TextureFormat.DXT1)
											ffw.Write((byte)0x31);
										else if (fe.Format == TextureFormat.DXT3)
											ffw.Write((byte)0x33);
										else if (fe.Format == TextureFormat.DXT5)
											ffw.Write((byte)0x35);

										ffw.Write(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
										0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
										0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
										ffw.Write(dats);

										fakefilemem.Position = 0;
										using (MagickImage f = new MagickImage(fakefilemem, sett))
											f.Write(outfile, MagickFormat.Png);
									}
								}
							}
							else
							{
								PixelReadSettings r = new PixelReadSettings(fe.Width, fe.Height, StorageType.Char, PixelMapping.RGBA);
								using (MagickImage f = new MagickImage(dats, r))
									f.Write(outfile, MagickFormat.Png);
							}

							sw.WriteLine(string.Format("{0,-32}\t{1,8}\t0x{2,-8:X}\t0x{3,-8:X}", fe.Name, fe.Format.ToString(), fe.Size, fe.Offset));
						}
					}
				}
				File.WriteAllText(Path.Combine(outpath, "_fileindex.txt"), sw.ToString());
				sw.Close();

				Console.WriteLine("Texture pack has been dumped! Press any key to exit.");
				//Console.ReadKey(); My brother in christ, RETURN CODES!!!!!!!!!!!!!!
				Environment.Exit(ERROR_SUCCESS);
			}
			else
			{
                Console.WriteLine("Texture pack has already been dumped! Press any key to exit.");
                Environment.Exit(ERROR_ALREADY_EXISTS);
            }
        }

		public struct FileBlock
		{
			public uint Key { get; set; }
			public int Size { get; set; }

			public uint StartOffset { get; set; }
		}

		private enum TextureFormat
		{
			A8R8G8B8 = 0,
			DXT1,
			DXT3,
			DXT5,

			Invalid
		}

		private struct FileEntry
		{
			public string Name { get; set; }
			public int Size { get; set; }
			public uint Offset { get; set; }
			public int Width { get; set; }
			public int Height { get; set; }
			public TextureFormat Format { get; set; }
		}
	}
}
